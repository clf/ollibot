%% Testing application with basic combinators
%% Robert J. Simmons

%% The basic combinators

%exec ci(ÎÂ»x. x).               %% I : i â†’ i
%exec ck(ÎÂ»x.ÎÂ»y. x).            %% K : i â†’ i â†’ i
%exec cs(ÎÂ»x.ÎÂ»y.ÎÂ»z. x z (y z)). %% S : (i â†’ i) â†’ i â†’ i

%% Composition tests (the constants "c" and "d" should have base type)

%exec co((ÎÂ»x. x) c).                                    %% Ic
%exec co((ÎÂ»x.ÎÂ»y. x) c d).                               %% Kcd
%exec co((ÎÂ»x.ÎÂ»y.ÎÂ»z. x z (y z)) (ÎÂ»x.ÎÂ»y. x) (ÎÂ»x. x) d).   %% SKId
%exec ci((ÎÂ»x.ÎÂ»y.ÎÂ»z. x z (y z)) (ÎÂ»x.ÎÂ»y. x) (ÎÂ»x. x)).     %% SKI
%exec ck'((ÎÂ»x.ÎÂ»y.ÎÂ»z. x z (y z)) (ÎÂ»x.ÎÂ»y. x)).            %% SK

%% Modified eta-expansion 

%exec ci(ÎÂ»x. (ÎÂ»x. x) x).  
%exec ck(ÎÂ»x.ÎÂ»x. (ÎÂ»x. x) x).
%exec ck(ÎÂ»x.ÎÂ»y. (ÎÂ»x. x) x).
%exec ck(ÎÂ»x.ÎÂ»y. (ÎÂ»x.ÎÂ»y. x) x y). %% ÎÂ»x.ÎÂ»y.Kxy                         
%exec ck(ÎÂ»x.ÎÂ»y. (ÎÂ»x.ÎÂ»y. x) x x). %% ÎÂ»x.ÎÂ»y.Kxx
%exec ck(ÎÂ»x.ÎÂ»y. (ÎÂ»x.ÎÂ»y. x) y y). %% ÎÂ»x.ÎÂ»y.Kyy
%exec ck(ÎÂ»x.ÎÂ»y. (ÎÂ»x.ÎÂ»y. x) y x). %% ÎÂ»x.ÎÂ»y.Kyx
%exec csÊÂ³(ÎÂ»x.ÎÂ»y.ÎÂ»z. (ÎÂ»x.ÎÂ»y.ÎÂ»z. x z (y z)) z y x).