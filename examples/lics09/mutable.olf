%% Mutable storage
%% "Substructural Operational Semantics as Ordered Logic Programming", LICS '09
%% Robert J. Simmons, Frank Pfenning


%% Call-by-value functions (Figure 3)

vlam : eval(lam λx. E x) ->> return(lam λx. E x).

eapp₁ : eval(app E₁ E₂) ->> comp(app₁ E₂) • eval(E₁).
eapp₂ : comp(app₁ E₂) • return(V₁) ->> comp(app₂ V₁) • eval(E₂).
eapp₃ : comp(app₂ (lam λx.E₀ x)) • return(V₂) ->> eval(E₀ V₂).


%% Mutable storage (Figure 4)

eref₁ : eval(ref E) ->> comp(ref₁) • eval(E).
eref₂ : comp(ref₁) • return(V) ->> ∃D. return(loc D) • ¡cell D V.

eget₁ : eval(get E) ->> comp(get₁) • eval(E).
eget₂ : comp(get₁) • return(loc D) • ¡cell D V ->> return(V) • ¡cell D V.

eset₁ : eval(set E₁ E₂) ->> comp(set₁ E₂) • eval(E₁).
eset₂ : comp(set₁ E₂) • return(V₁) ->> comp(set₂ V₁) • eval(E₂).
eset₃ : comp(set₂ (loc D)) • return(V₂) • ¡cell D V ->> return(V₂) • ¡cell D V₂.

vloc : eval(loc D) ->> return(loc D).

%exec eval (set (ref (lam λx. lam λy. y)) (lam λx. lam λy. x)).
