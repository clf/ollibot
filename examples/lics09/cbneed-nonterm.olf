-- Call-by-need suspensions with a fixed point
-- Robert J. Simmons

{-
''This examples is derived from Figure 3 in [[readme.txt| Substructural 
Operational Semantics as Ordered Logic Programming]].''

This is a modification of [[cbneed-fix.olf]] that restores the `susp` when the 
value at a destination is first required; the only purpose for doing so is that
cetrain traces that would become stuck in the specification from 
[[cbneed-fix.olf]] will ("correctly") fail to terminate here.
-}

{== Call-by-value functions ==}

elam : eval(lam λx. E x) ->> return(lam E).
eapp₁ : eval(app E₁ E₂) ->> comp(app₁ E₂) • eval(E₁).
eapp₂ : comp(app₁ E₂) • return(V₁) ->> comp(app₂ V₁) • eval(E₂).
eapp₃ : comp(app₂ (lam λx. E₀ x)) • return(V₂) ->> eval(E₀ V₂).

{== Fixed point recursion (call-by-need) ==}

efix  : eval(fix λx. E x) ->> ∃D. eval(E D) • ¡susp (E D) D.
esusp : eval(D) • ¡susp E D ->> comp(bind₁ D) • eval E • ¡susp E D.
ebind : comp(bind₁ D) • return(V) • ¡susp E D ->> return(V) • !bind V D.
evar  : eval(D) • !bind V D ->> return V.

{== Example traces ==}

{-
Both examples appeared in [[cbneed-fix.olf]], where they got stuck. Here they 
fail to terminate, leaving multiple `comp(bind₁ D)` frames on the stack for the
same destination `D`.
-}

%trace 4 eval(fix λx. x).
%trace 9 eval(fix λx. app (lam λy. y) x). 

