= Asynchronous communication =
== Robert J. Simmons, Frank Pfenning ==

''This example is derived from Figures 3 and 6 in 
[[/lics09/readme.txt |
Substructural Operational Semantics as Ordered Logic Programming]].''

== Call-by-value functions ==

> r₁ : eval(lam λx. E x) ->> return(lam E).
> r₂ : eval(app E₁ E₂) ->> comp(app₁ E₂) • eval(E₁).
> r₃ : comp(app₁ E₂) • return(V₁) ->> comp(app₂ V₁) • eval(E₂).
> r₄ : comp(app₂ (lam λx.E₀ x)) • return(V₂) ->> eval(E₀ V₂).


== Asynchronous communication ==

> enew : eval(new (λx. E x)) ->> ∃C. eval(E C).

> esnd₁ : eval(send C E) ->> comp(send₁ C) • eval(E).
> esnd₂ : comp(send₁ C) • return(V) ->> ¡msg C V • return(V).

> ercv₁ : eval(rcv C) ->> comp(await C).
> ercv₂ : comp(await C) • ¡msg C V ->> return(V).


== Some constants ==
Just so that there's some slightly-meaningful messages to send around:

> econst : eval(const C) ->> return(const C).


== Example trace == 

The first process creates a channel, and then passes that newly generated
channel along an existing channel chan₁ to the third process.
The third process is inside of a higher-order function that allows the 
process to send back an acknowledgement to the first process. 
The second process is just a dummy to emphasize that the communication is 
nonlocal.

> %trace * 
> ∃chan₁. eval(new λchan₂. app (lam λx. rcv chan₂) 
>                               (send chan₁ (lam λx. send chan₂ x)))
>       • eval (const unit)
>       • eval(app (lam λx. const unit) (app (rcv chan₁) (const ack))).