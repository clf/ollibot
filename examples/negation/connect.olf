-- Leadership calculation
-- Robert J. Simmons

{- More non-determinstic than follow-the-leader.olf, but only because the
graph is not symmetric: depending on the state transitions we make with rule
v₁, there many end up being a whole lot of leaders or very few.

Here too, compared to follow-the-leader.olf, we avoid the desire for stratified
negation among the persistent rules by just defining the leader to be any
vertex that leads itself. -} 

{== Persistent rules ==}

r₁ : !leads L X ->> !is_led X.
r₂ : !leads L X • !edge X Y ->> !leads L Y.

{== Linear rules ==}

v₁ : vertex X • !is_led X ->> 1.
v₂ : vertex X • ¬is_led X ->> !is_leader X • !leads X X.

%trace * vertex a • vertex b.

%trace * vertex a • vertex b • !edge a b.

%trace * vertex a • vertex b • !edge b a.

{- Because of the determinstic operational semantics, this trace will appoint
"a" the first leader, delete "b", then appoint "f" the second leader. Because
the edges are undirected, "d" will also be appointed a leader. If "d" had
been chosen to lead before "f", then both would not have become leaders. -} 
%trace * vertex a • vertex b • vertex f • vertex c • vertex d • vertex e 
     • !edge a c • !edge c b • !edge b a • !edge d e • !edge e f.